{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.browser.esm.js","sources":["file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/ed25519.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/to-buffer.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/borsh-schema.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/publickey.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/account.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/bpf-loader-deprecated.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/transaction/constants.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/transaction/expiry-custom-errors.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/message/account-keys.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/layout.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/shortvec-encoding.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/assert.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/message/compiled-keys.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/guarded-array-utils.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/message/legacy.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/message/v0.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/message/versioned.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/transaction/legacy.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/transaction/message.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/transaction/versioned.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/timing.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/sysvar.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/errors.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/send-and-confirm-transaction.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/sleep.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/instruction.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/fee-calculator.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/nonce-account.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/bigint.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/system.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/loader.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/bpf-loader.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/node_modules/.pnpm/fast-stable-stringify%401.0.0/node_modules/fast-stable-stringify/index.js","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/epoch-schedule.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/__forks__/browser/fetch-impl.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/rpc-websocket.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/account-data.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/address-lookup-table/state.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/makeWebsocketUrl.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/connection.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/keypair.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/address-lookup-table/index.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/compute-budget.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/ed25519.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/secp256k1.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/secp256k1.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/stake.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/programs/vote.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/validator-info.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/vote-account.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/cluster.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","file:///Users/uneebagha/Documents/max/BankrBotOnSol/node_modules/.pnpm/%40solana%2Bweb3.js%401.98.0_bufferutil%404.0.9_encoding%400.1.13_utf-8-validate%405.0.10/node_modules/%40solana/web3.js/src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  programId?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const {\n      context,\n      value: {blockhash},\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature(): number {\n        throw new Error(\n          'The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' +\n            'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' +\n            'for a given message.',\n        );\n      },\n      toJSON() {\n        return {};\n      },\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator,\n      },\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                console.error(\n                  `Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``,\n                  {\n                    args,\n                    error: e,\n                  },\n                );\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","Symbol","toStringTag","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","_PublicKey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","a","transactionLogs","transactionError","cachedLogs","getLogs","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","fastStableStringify","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","globalThis","fetch","RpcWebSocketClient","CommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","notify","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","memcmp","encoding","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","unsafeRes","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getLatestBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"debugId":null}}]
}